

bool isPalindrome(const std::string& s, int start, int end) {
  while (start < end) {
    if (s[start] != s[end]) {
      return false;
    }
    start++;
    end--;
  }
  return true;
}

std::string longestPalindrome(const std::string& s) {
  int n = s.length();
  std::vector<std::vector<bool>> dp(n, std::vector<bool>(n, false));

  for (int i = 0; i < n; i++) {
    dp[i][i] = true;
  }

  for (int i = n - 1; i >= 0; i--) {
    for (int j = i + 1; j < n; j++) {
      if (s[i] == s[j]) {
        if (j - i == 1 || dp[i + 1][j - 1]) {
          dp[i][j] = true;
        }
      }
    }
  }

  int max_len = 0;
  std::string longest_palindrome;
  for (int i = 0; i < n; i++) {
    for (int j = i; j < n; j++) {
      if (dp[i][j] && j - i + 1 > max_len) {
        max_len = j - i + 1;
        longest_palindrome = s.substr(i, max_len);
      }
    }
  }

  return longest_palindrome;
}
